@inherits UmbracoViewPage<dynamic>
@using Umbraco.Web.Templates
@using Newtonsoft.Json.Linq

@* 
    Razor helpers located at the bottom of this file
*@

@if (Model != null && Model.sections != null)
{
    var oneColumn = ((System.Collections.ICollection)Model.sections).Count == 1;
    
        if (oneColumn)
        {
            foreach (var section in Model.sections) {

                    foreach (var row in section.rows) {
                        @renderRow(row, true);
                    }
            }   
        } else { 
                    foreach (var s in Model.sections) {
                                foreach (var row in s.rows) {
                                    @renderRow(row, false);
                                }
                    } 
        }
}

@helper renderRow(dynamic row, bool singleColumn){
    <section class="row" @RenderElementAttributes(row)>
        @foreach (var area in row.areas)
        {
            <div class="one-third-col" @RenderElementAttributes(area)>
                @foreach (var control in area.controls)
                {
                    if (control != null && control.editor != null && control.editor.view != null)
                    {
                        <text>@Html.Partial("grid/editors/base", (object)control)</text>
                    }
                }
            </div>
        }
    </section>

        @functions {
    public static MvcHtmlString RenderElementAttributes(dynamic contentItem)
    {
        var attrs = new List<string>();
        JObject cfg = contentItem.config;

        if(cfg != null)
            foreach (JProperty property in cfg.Properties()) {
                attrs.Add(property.Name + "=\"" + property.Value.ToString() + "\"");
            }

        JObject style = contentItem.styles;

        if (style != null) {
        var cssVals = new List<string>();
        foreach (JProperty property in style.Properties())
            cssVals.Add(property.Name + ":" + property.Value.ToString() + ";");

        if (cssVals.Any())
            attrs.Add("style=\"" + string.Join(" ", cssVals) + "\"");
        }

        return new MvcHtmlString(string.Join(" ", attrs));
    }
  }
}
